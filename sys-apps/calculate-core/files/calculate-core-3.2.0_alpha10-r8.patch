diff --git core/server/api_types.py core/server/api_types.py
index b5d7e76..d9f268c 100644
--- core/server/api_types.py
+++ core/server/api_types.py
@@ -531,8 +531,8 @@ class CoreWsdl:
                 checkall = info.CheckAll
             errors = map(lambda x:ReturnedMessage(**x),
                      dv.checkGroups(info,allvars=checkall or not checkonly))
-            if dv.Get('cl_env_debug_set') == 'on':
-                dv.printGroup(info)
+            #if dv.Get('cl_env_debug_set') == 'on':
+            #    dv.printGroup(info)
             if errors:
                 return errors
             if checkonly:
diff --git core/server/func.py core/server/func.py
index 00249b8..5b39e49 100644
--- core/server/func.py
+++ core/server/func.py
@@ -20,6 +20,7 @@ import sys, os, re
 from os import path
 import traceback
 from traceback import print_exc
+from calculate.lib.cl_log import log
 from api_types import ReturnProgress,ViewParams,Integer,ViewInfo
 from loaded_methods import LoadedMethods
 from calculate.lib.cl_lang import setLocalTranslate,getLazyLocalTranslate
@@ -140,7 +141,9 @@ class CommonMethods:
         # определение каталогов содержащих шаблоны
         dirs_list, files_list = ([],[])
         useClt = useClt in ("on",True)
-        clTempl = ProgressTemplate(self.setProgress,self.clVars,
+        self.addProgress()
+        nullProgress = lambda *args,**kw:None
+        clTempl = ProgressTemplate(nullProgress,self.clVars,
                 cltObj=useClt,
                 cltFilter=cltFilter,
                 printSUCCESS=self.printSUCCESS,
@@ -707,9 +710,20 @@ class Action:
 
     def run(self, objs, dv):
         """Запустить список действий"""
+        class StubLogger:
+            def info(self,s):
+                pass
         result = {}
+
         self.group_name = ""
         self.clVars = dv
+        if dv.Get('cl_env_debug_set') == 'off' or \
+            dv.Get('cl_ebuild_phase'):
+            logger = StubLogger()
+        else:
+            logger = log("core-action.log",
+                         filename="/var/log/calculate/core-action.log",
+                         formatter="%(asctime)s - %(levelname)s - %(message)s")
         for obj in objs.values():
             obj.set_link(self)
             obj.clVars = dv
@@ -717,6 +731,8 @@ class Action:
                 obj.init()
         try:
             self.beginFrame()
+            logger.info("Start {methodname}".format(
+                methodname=self.method_name))
             for action in self.get_tasks(result):
                 foreach = action.get("foreach","")
                 if foreach:
@@ -732,6 +748,15 @@ class Action:
                     task = False
                     try:
                         run_context = self.get_condition_context(action, result)
+                        actinfo = "Run" if all(run_context.values()) else "Skip"
+                        logger.info(
+                            "{action} {name}: condition: {condition}, "
+                            "depend: {depend}".format(
+                                action=actinfo,
+                                name=name,
+                                condition=run_context['condition'],
+                                depend=run_context['depend']))
+
                         elsePrint, elseMessage = (
                             self.getFormatMessage(action,"else_error",
                                               "else_warning","else_message"))
@@ -810,6 +835,8 @@ class Action:
                                 failedPrint(failedMessage)
                             if task and res in (True,False,"skip"):
                                 self.endTask(res)
+                            logger.info("{name}: Result is {result}".format(
+                                name=name, result=res))
                             if res is True:
                                 on_success = action.get('on_success',None)
                                 if on_success:
@@ -822,15 +849,19 @@ class Action:
                         self.endTask(False)
                         self.printWARNING(_("Task interrupted"))
                         result["interrupt"] = False
+                        logger.info("{name}: Interrupeted".format(name=name))
                     except self.native_error as e:
                         if hasattr(e,"addon") and e.addon:
                             self.printERROR(str(e.addon))
                         self.printERROR(str(e))
                         result[name]=False
+                        logger.info("{name}: Native error".format(name=name))
                     except BaseException as e:
                         result[name]=False
                         error = shortTraceback(*sys.exc_info())
                         self.printERROR("%s:%s"%(name,error))
+                        logger.info("{name}: Unknown exception {exp}".format(
+                            name=name, exp=e.__class__.__name__))
         finally:
             dv.close()
         self.endFrame()
@@ -1087,7 +1118,7 @@ class CoreWsdl():
             self.process_dict['counter'] -= 1            
             return res
 
-        def addProgress(self,message):
+        def addProgress(self,message=""):
             id = random.randint(1, self.Num)
             while id in self.progress_dict:
                 id = random.randint(1, self.Num)
diff --git core/server/methods_func.py core/server/methods_func.py
index 5a25e4e..fb9565b 100644
--- core/server/methods_func.py
+++ core/server/methods_func.py
@@ -237,7 +237,8 @@ def get_method_argparser(view, args, cl_core = False):
                     #    data['metavar'] = field.name.upper()
                     if "choice" in field.type:
                         data['help'] = "%s (%s)" % (
-                            data['help'], _("'list' for display possible values"))
+                            data['help'],
+                            _("'list' for displaying possible values"))
                 if field.element in ['check']:
                     data['metavar'] = "ON/OFF"
                 try:
@@ -388,7 +389,7 @@ def display_error(error, args, groups):
     elif error.type != "commonerror":
         colorPrint.printERROR(params_text % error.message)
     else:
-        colorPrint.printWARNING(params_text % error.message)
+        colorPrint.printWARNING(error.message)
 
 
 def check_result_msg(method_result, view, input_error_dict={}, args=None):
diff --git core/setup_package.py core/setup_package.py
index f920af7..3285b52 100644
--- core/setup_package.py
+++ core/setup_package.py
@@ -113,7 +113,7 @@ class UpdateConfigs(UpdateLogger):
         """
         Получить пользователей в X сессии
         """
-        return self.clVars.Get('desktop.cl_desktop_online_user')
+        return list(self.clVars.Get('desktop.cl_desktop_online_user'))+["root"]
 
     def getConfiguredPasswdUsers(self):
         """
diff --git core/variables/setup_package.py core/variables/setup_package.py
index ac6daf6..9da4e0d 100644
--- core/variables/setup_package.py
+++ core/variables/setup_package.py
@@ -201,7 +201,7 @@ class VariableClCorePkgDesktopSet(Variable):
     def check(self,value):
         if self.Get('cl_templates_locate') == ["clt"] and value == "on":
             raise VariableError(
-                _("You shouldn't choice only clt location "
+                _("You must not choose only clt location "
                   "for desktop templates"))
 
     def init(self):
